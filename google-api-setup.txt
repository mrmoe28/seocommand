Google Search Console API Setup Instructions
=====================================================

Follow these step-by-step instructions to enable Google Search Console API access for SEO SiteWatcher.

## Step 1: Create a Google Cloud Project

1. Go to the Google Cloud Console: https://console.cloud.google.com/
2. Click "Select a Project" at the top of the page
3. Click "New Project"
4. Enter a project name: "SEO SiteWatcher" (or your preferred name)
5. Select your organization if applicable
6. Click "Create"

## Step 2: Enable Required APIs

1. In the Google Cloud Console, go to "APIs & Services" > "Library"
2. Search for and enable these APIs:
   - Google Search Console API
   - Google Analytics Reporting API (optional, for future features)

For each API:
- Click on the API name
- Click "Enable"
- Wait for the API to be enabled

## Step 3: Create OAuth 2.0 Credentials

1. Go to "APIs & Services" > "Credentials"
2. Click "Create Credentials" > "OAuth 2.0 Client IDs"
3. If prompted, configure the OAuth consent screen first (see Step 4)
4. Select application type: "Web application"
5. Enter a name: "SEO SiteWatcher Web Client"
6. Add Authorized JavaScript origins:
   - http://localhost:3000 (for development)
   - https://your-domain.com (for production)
7. Add Authorized redirect URIs:
   - http://localhost:3000/api/auth/callback/google (for development)
   - https://your-domain.com/api/auth/callback/google (for production)
8. Click "Create"
9. Save the Client ID and Client Secret for your environment variables

## Step 4: Configure OAuth Consent Screen

1. Go to "APIs & Services" > "OAuth consent screen"
2. Choose "External" user type (unless you have a Google Workspace domain)
3. Fill in the required information:
   - App name: "SEO SiteWatcher"
   - User support email: your email address
   - App logo: Optional but recommended
   - App domain: your application domain
   - Developer contact information: your email address
4. Click "Save and Continue"

### Add Scopes:
1. Click "Add or Remove Scopes"
2. Add these scopes:
   - openid
   - email
   - profile
   - https://www.googleapis.com/auth/webmasters.readonly
3. Click "Update" then "Save and Continue"

### Add Test Users (for development):
1. Add your email address as a test user
2. Add any other email addresses that need access during development
3. Click "Save and Continue"

## Step 5: Verify Websites in Google Search Console

Before using the API, ensure your websites are verified in Google Search Console:

1. Go to https://search.google.com/search-console
2. Click "Add Property"
3. Choose "URL prefix" and enter your website URL
4. Follow the verification instructions (HTML file upload, DNS, etc.)
5. Repeat for all websites you want to monitor

## Step 6: Set Up Environment Variables

Add these to your .env.local file:

```
GOOGLE_CLIENT_ID="your-client-id-here"
GOOGLE_CLIENT_SECRET="your-client-secret-here"
```

## Step 7: Test the Integration

1. Start your development server: `npm run dev`
2. Go to http://localhost:3000
3. Sign in with your Google account
4. Grant permissions when prompted
5. Check that your verified websites appear in the dashboard

## Important Notes

### API Quotas and Limits:
- Google Search Console API has daily quotas
- Standard quota: 1,200 queries per day
- Each request can return up to 25,000 rows
- Rate limit: 10 queries per minute per user

### Scopes Required:
- `https://www.googleapis.com/auth/webmasters.readonly` - Read-only access to Search Console data
- `openid email profile` - Basic user information

### Production Considerations:
1. Update OAuth redirect URIs with your production domain
2. Remove test users and publish the OAuth consent screen
3. Consider applying for OAuth verification if you plan to serve many users
4. Monitor API usage in the Google Cloud Console

### Troubleshooting:

**Error: "access_denied"**
- Check that the OAuth consent screen is properly configured
- Ensure the user is added as a test user (for unverified apps)
- Verify the redirect URIs match exactly

**Error: "invalid_client"**
- Check that the client ID and secret are correct
- Ensure the OAuth client is configured for web applications

**Error: "insufficient_permissions"**
- Verify the website is properly verified in Search Console
- Check that the user has owner or full user permissions for the website

**No data returned:**
- Ensure the website has been verified in Search Console for at least 3 days
- Check that the website has received search traffic
- Verify the API scopes include webmasters.readonly

## Security Best Practices

1. Never commit your Client ID/Secret to version control
2. Use environment variables for all sensitive data
3. Regularly rotate your OAuth credentials
4. Monitor API usage for unusual activity
5. Implement proper error handling for API failures

## Support Resources

- Google Search Console API Documentation: https://developers.google.com/webmaster-tools
- Google Cloud Console: https://console.cloud.google.com/
- OAuth 2.0 Documentation: https://developers.google.com/identity/protocols/oauth2
- SEO SiteWatcher Support: support@seositewatcher.com

For additional help, check the troubleshooting section in the main README.md file.